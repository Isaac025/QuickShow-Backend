npm init -y
npm install nodemon --save-dev
npm install express cloudinary cors dotenv mongoose

user data is gotten from clerk profile
set up clerk on backend
1. go to clerk homepage
2. click on docs
3. select app or sdk
4. select express and install clerk 
5. add the keys in .env file
6. add clerk middleware to app.js (main file)

7. open clerk dashboard
8. click configure
9. click on webHooks (where you get the user data)
10. click on add endPoint => click on ingest ("connect messages to ingest)
11. open inngest.com, create account/org 
12. click event keys at the top left corner near "production" also click on signing key to get the signing key
13. default inngest key is the one we need
14. create INNGEST_EVENT_KEY in .env file and paste the inngest key there

15. create INNGEST_SIGNING_KEY in .env file 
16. INNGEST HOME PAGE => click docs => click nodeJs => Inatall ingest
17. create an ingest client (create new folder called ingest, then create index.js file in the folder)
** connect inngest with clerk => create => click testing => select an event type => user event

-- deploy frontned and backend 
-- sync inngest project/platform
-- apps ==> sync new app --. provide backend url /api/inngest --> sync app
-- delete acccount on your deployed website then check "runs" on inngest to see the deleted info


minimize: false Option
This option tells Mongoose to not remove empty objects when saving documents to MongoDB.
Normally, Mongoose removes empty objects ({}) from documents to save space
With minimize: false, even if occupiedSeats is empty ({}), it will still be stored in the database
This is useful for the occupiedSeats field because:
You want to maintain the field structure even when no seats are occupied
It ensures consistent document structure
Makes it easier to query and update the field later

--for tmdb api 
-- tmdb website --> login --> settings --> api --> copy api key
--click more --> api documentation --> api reference (make sure it is on v3) --> left hand side (now playing) --> node.js --> try it